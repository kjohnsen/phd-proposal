{
  "hash": "feada7d425914b2c5c356751c86349a2",
  "result": {
    "markdown": "---\nexecute: \n  echo: false\n---\n\n# Aim 2: Multi-input CLOC {#sec-aim2}\n\n<!-- math macros -->\n\\newcommand\\RR{\\mathbb{R}}\n\\newcommand\\NN{\\mathbb{N}}\n\\newcommand\\mini{\\text{minimize}}\n\n## Rationale\n### Advantages of multi-input control\nThe power of closed-loop optogenetic control (CLOC, henceforth referring specifically to feedback control; see @sec-cl-types) is limited by the degrees of freedom provided by the optogenetic actuation scheme.\nOne important distinction in possible actuation schemes is between \"unidirectional\"---control by a single opsin type---and \"bidirectional\"---where both excitatory and inhibitory opsins are used.\nUnidirectional control has obvious shortcomings: for example, an excitatory opsin alone can only raise the firing rate of target neurons, not lower it or even clamp to a baseline level.\nThis setup would also be unable to *lower* the firing rate quickly, in the case of a dynamic reference trajectory.\nMoreover, besides enabling bidirectional stimulation, general multi-input methods could enable more precise control by targeting different neurons simultaneously, such as stimulation of cells at different depths in a cortical column or across columns.\n\n### Advantages of model-based, optimal control\nWhile a previous study [@newman15] has already laid the foundation for bidirectional CLOC, it does not feature the generalizability and scalability of the model-based, optimal control algorithms introduced by later work [@bolus21] (see @sec-prev-work) for unidirectional actuation.\nThis adaptive linear-quadratic regulator (LQR) approach is more robust to disturbances and can scale to multi-input multi-output (MIMO) systems.\nMoreover, its behavior can be easily configured by setting penalties on state error, the control signal, and even the derivative of the control signal to encourage smooth actuation.\n\n### Challenges of combining\nThus, a natural goal for furthering CLOC is to combine the advantages of bidirectional actuation and model-based optimal control---however, this poses additional challenges and opportunities.\nThe adaptive LQR method previously developed is unsuitable for bidirectional actuation because it does not model the constraint that the input (light intensity) must be nonnegative. \nWhile violations of this constraint are relatively infrequent and of little consequence when using an excitatory opsin to reach elevated, slowly varying trajectories, a dual-input scenario would be different.\nFor instance, the controller might call for negative inhibitory input rather than positive excitatory input---a problem that might be solvable with heuristics for the simplest cases but which would pose serious limitations with increasing actuator count.\n\n### Innovation\nI propose addressing this problem using model predictive control (MPC), which is widely used for its flexibility in implementing optimal control with constraints.\nRather than computing the control signal from the current error signal at each step, MPC looks ahead, optimizing over the predicted trajectory some finite number of steps into the future, in what is known as \"receding horizon control.\"\nI hypothesize that a model predictive strategy will be able to optimize multi-input optogenetic actuation while accommodating experimental constraints and considerations and maintaining low error levels during fast, real-time control.\nI plan to achieve this aim by adapting previously demonstrated linear models and adding input constraints, demonstrating the advantage of MPC-powered multi-input CLOC *in silico*, and benchmarking algorithm performance to inform future *in-vivo* experiments.\n\n:::{#fig-mpc}\n::::{.dark-invert}\n![](img/mpc-schematic.png){style='padding:.5em; background: white'}\n::::\n\nAn illustration of how MPC optimizes the system input over a receding horizon.\nBy [Martin Behrendt](https://en.wikipedia.org/wiki/File:MPC_scheme_basic.svg), licensed under [CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/deed.en).\n:::\n\n## Approach\n### System and controller formulation\nNaturally, the model is a vital element of MPC.\nI will use a previously developed Gaussian linear dynamical system (GLDS) model [@bolus21], which has been shown to reliably capture firing rate dynamics in a light-driven spiking neuron system.\nThe discrete-time GLDS is governed by the following equations:\n\n$$ x_{t + 1} = Ax_{t} + Bu_{t} + w_t\\ , $$\n\n$$ y_{t} = Cx_{t} + d\\ , $$\n\n$$ z_{t} = y_{t} + v_t\\ , $$\n\nwhere $x_{t} \\in \\RR^n$ is the $n$-dimensional state, $u_{t} \\in \\RR^k$ is the $k$-dimensional stimulus (i.e., $k = 2$ for two opsins, one light source each), $y_{t} \\in \\RR^m$ is the firing rate in spikes/timestep (for each of $m$ measured neurons), and $z_{t} \\in \\RR^m$ is the number of binned spikes observed at time $t$.\n$A \\in \\RR^{n \\times n}$, $B \\in \\RR^{n \\times k}$, and $C \\in \\RR^{m \\times n}$ are the state transition, input, and output matrices, respectively.\n$w_{t} \\sim \\mathcal{N}\\left( 0, Q \\right)$ and $v_{t}\\mathcal{\\sim N}\\left( 0, R \\right)$ are Gaussian-distributed process and measurement noise, respectively, and $d \\in \\RR^{m \\times 1}$ represents baseline firing rates.\nModel order ($n$) and horizon length ($T \\in \\NN$) will be chosen to balance complexity and prediction error for noise-driven fitting data generated from the test network.\nThe latent state $x_{t}$ will be estimated online using the Kalman filter [@kalman60], driven by the prediction error $z_{t} - {\\widehat{y}}_{t|t - 1}$.\n\nI will set hard non-negative constraints on the light input as well as a ceiling determined by hardware limitations (i.e., the maximum voltage deliverable to the LED driver).\nTo design an appropriate cost function, I will use a conventional per-time step quadratic form\n\n$$\\ell( x_{t},r_{t},u_{t} ) = ( x_{t} - r_{t} )^{T}Q^{\\text{ctrl}}( x_{t} - r_{t} ) + u^{T}R^{\\text{ctrl}}u\\ ,$$\n\nwhere $r_{t} \\in \\RR^n$ is the reference trajectory at time $t$.\n$Q^{\\text{ctrl}}$ and $R^{\\text{ctrl}}$ are real $n \\times n$ and $k \\times k$ matrices chosen to appropriately penalize tracking error and stimulus size, respectively.\nThis quadratic cost function formulation lends the problem well to standard optimization techniques---combined with a linear dynamical system, it constitutes the classical linear-quadratic-Gaussian (LQG) control problem.\n\nThen, at every time step $t$ the controller solves the following quadratic program:\n\n$$ \n\\begin{aligned}\n    \\mini{} \\quad & \\sum_{\\tau=t}^{t+T} \\ell(x_\\tau, u_\\tau) \\\\\n    \\text{subject to} \\quad & u_\\tau \\succeq 0 \\\\\n        & x_{\\tau + 1} = Ax_{\\tau}+Bu_\\tau \\\\\n\\end{aligned}\n$$\n\nwhere $T \\in \\NN$ is the number of steps in the prediction/control horizon and $\\succeq$ indicates an inequality for each element of $u_\\tau \\in \\RR^k$.\nThis yields the solution $\\tilde{u}_\\tau,...,\\tilde{u}_{\\tau+T-1}$, of which we take just the first step to apply to the system:\n\n$$ u_t = \\tilde{u}_t $$\n\n\n### Demonstration of advantages *in silico*\nTo demonstrate the advantages of bidirectional control and of MPC, I will control the firing rate of simulated spiking neurons under four conditions: LQR with one opsin, LQR with two opsins, MPC with one opsin and MPC with two opsins.\nI will test scenarios where the limitations of unidirectional control and LQR will be manifest, namely clamping activity to baseline levels in the presence of unmodeled disturbances to the system and for time-varying reference trajectories.\nI will also demonstrate the more advanced multi-input applications of MPC by controlling multiple neurons simultaneously with multiple light sources.\n\nAll experiments will be performed on a simulated randomly connected network of excitatory and inhibitory leaky integrate-and-fire (LIF) neurons or a Poisson linear dynamical system [@macke11] model fit to simulated data.\nThe framework of Aim 1 will be leveraged to simulate electrode recording and optogenetic stimulation, and spikes from individual neurons will be used as inputs to the controller.\nIn all experiments I will compare my MPC approach to the unconstrained LQR controller developed previously [@bolus21].\nI will also compare to an optimal open-loop stimulus computed over a whole-trial horizon.\nTo evaluate controller performance, I will use metrics such as the mean-squared error (MSE) between the reference firing rate and the Gaussian window-smoothed firing rate of the spikes received by the controller during the trial.\nNoise will be provided to the network where needed to simulate an external disturbance.\n\n### Preparation for real-time experiments\nTo inform future experiments where compute time is crucial for control performance, I will record compute time of LQR and MPC approaches for varying numbers of input and output channels $k$ and $m$. \nFor instance, the time required to solve the quadratic program for MPC would provide a preliminary estimate of the minimum control period we may want to use when implementing MPC in real time.\nTo get a better idea of how this compute latency might affect a real experiment, I will also test multi-input MPC on a more realistic simulation, such as one of the example experiments from @sec-cleo-experiments, leveraging the latency simulation capabilities of the CLOC simulation framework.\n\n## Expected results\nI expect that bidirectional control will be perform better than unidirectional control at the aforementioned tasks of clamping baseline activities and following a dynamic reference trajectory.\nI also expect that MPC will attain higher performance than LQR for all multi-input conditions and especially in the case of a dynamic reference.\nWhile MPC will be considerably slower than LQR, it should be fast enough for control of neural phenomena on the timescale of hundreds of milliseconds.\n\n## Preliminary results\nBasic simulations controlling a linear dynamical system model fit to experimental data show the advantages of bidirectional control and of MPC (see @fig-mpc-sim).\nBidirectional actuation allows the system to avoid overshooting the reference, in the case of LQR, or to minimize error faster by first exciting then inhibiting, in the case of MPC.\nMPC's advantages in looking ahead also clearly allow it to follow the reference more closely than the heuristic LQR controller (assigning negative inputs to the second light source).\n\n\n\n\n\n\n\n\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=6}\n![Simulated control of an linear dynamical system with 1- and 2-input control, using LQR and MPC controllers. The top panel of each contains the reference and the actual firing rate, in spikes/second. The bottom contains the light intensity, in terms of mW/mm^2^, where blue represents light for an excitatory opsin (such as ChR2) and red-orange that for an inhibitory opsin (such as Jaws).](aim2_files/figure-pdf/fig-mpc-sim-output-1.pdf){#fig-mpc-sim}\n:::\n:::\n\n\n## Potential pitfalls, alternative strategies\nThere are some limitations in the proposed GLDS model that may need to be addressed.\nWhile it was adequate for the experiments in @bolus21, a Poisson linear dynamical system model [@macke11] may be needed in the case that negative predicted firing rates (because the output is not constrained to be nonnegative) produce significant model mismatch error.\nAlso, in case the data is not fit well by a GLDS, I may explore the impact of making parts of the model nonlinear.\nThe output equation $y=Cx+d$, for example, could be replaced by a nonlinear equation of the form $y=f(x)$.\nWhile this would likely make the estimation of $x$ more expensive, the underlying dynamics could remain linear, leaving the same underlying quadratic program for the controller to solve.\n\nThis touches another potential concern: the speed of the algorithm.\nIf the optimization problem takes too long to solve, there are a few options to explore.\nOne is that some variations in the control scheme can help balance speed and performance, such as letting the control horizon be shorter than the prediction horizon, which shrinks the optimization problem.\nLikewise, the control period can be longer than the time step of the system, reducing how often the control signal is computed.\nIf conventional methods such as these are unsuccessful, I may turn to methods such as that described in @wang10 or training an artificial neural network to approximate the exact solution of the quadratic program or to minimize the cost directly.\nAnother potential solution is explicit MPC [@bemporad02], which finds a piecewise-affine explicit solution to the quadratic program which can be faster than using a solver to obtain the implicit solution for small-enough problems.\n\n",
    "supporting": [
      "aim2_files/figure-pdf"
    ],
    "filters": []
  }
}