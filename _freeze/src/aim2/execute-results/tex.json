{
  "hash": "a1f728b70f00806d446d3936b52cb2e2",
  "result": {
    "markdown": "---\nexecute: \n  echo: false\n---\n\n# Aim 2 - Multi-input CLOC {#sec-aim2}\n\n<!-- math macros -->\n\\newcommand\\RR{\\mathbb{R}}\n\\newcommand\\NN{\\mathbb{N}}\n\\newcommand\\mini{\\text{minimize}}\n\n## Rationale\n<!-- ### Advantages of multi-input control -->\nThe power of closed-loop optogenetic control (CLOC, henceforth referring specifically to feedback control; see @sec-cl-neuro) is limited by the degrees of freedom provided by the optogenetic stimulation.\nNaturally, we would want at least as many actuators as degrees of freedom in the system to control it effectively---for example, we may want to stimulate different layers, cell types, or columns separately in the cortex.\nMoreover, actuation/stimulation can be unidirectional or bidirectional, referring to whether a single opsin type or both excitatory and inhibitory opsins are used simultaneously.\nUnidirectional control has obvious shortcomings: for example, an excitatory opsin alone could not lower the firing rate of transfected cells, making it unsuitable to clamp baseline activity or follow a time-varying reference with steep drops.\n\n<!-- ### Advantages of model-based, optimal control -->\nWhile a previous study [@newman15] has implemented bidirectional CLOC, it does not feature the generalizability and scalability of the model-based, optimal control algorithms introduced by later work [@bolus21] (see @sec-prev-work) for unidirectional actuation.\nThis adaptive linear-quadratic regulator (LQR) approach is more robust to disturbances and can scale to multi-input multi-output (MIMO) systems.\nMoreover, its behavior can be easily configured by setting penalties on state error, the control signal, and even the derivative of the control signal to encourage smooth actuation.\n\n<!-- ### Challenges of combining -->\nThus, a natural goal for furthering CLOC is to combine the advantages of multi-input/bidirectional actuation and model-based optimal control---however, this poses additional challenges and opportunities.\nThe adaptive LQR method previously developed has limited application for multi-input actuation because it does not model the constraint that the input (light intensity) must be nonnegative. \n<!-- While violations of this constraint are relatively infrequent and of little consequence when using an excitatory opsin to reach elevated, slowly varying trajectories, a dual-input scenario would be different. -->\nThis would cause problems in the case of bidirectional (or any spatially overlapping) actuation, since the controller might call for negative excitatory input rather than positive excitatory input.\nA heuristic workaround to this is to place light sources in spatially non-overlapping pairs (e.g., blue and red) and treat them as the positive and negative directions of a single actuator.\nThis allows the continued use of simple and fast LQR methods but fails to model kinetic differences or spectral crosstalk between inhibitory and excitatory opsins and precludes alternate light configurations.\nWhile I hypothesize that methods for optimal control with constraints will outperform this heurstic LQR, such methods are more costly computationally.\nIt is thus unclear which method(s) are preferable for real-time control on the timescale of network-level variables of neural activity using compute resources typically available to an experimental neuroscience lab.\n\n### Innovation\nI propose addressing this problem by comparing LQR to model predictive control (MPC), which is widely used for its flexibility in implementing optimal control with constraints.\nRather than computing the control signal from the current error signal at each step, MPC looks ahead, optimizing over the predicted trajectory some finite number of steps into the future, in what is known as \"receding horizon control.\"\nThe quadratic program optimization required at every control step, however, introduces latency which could harm control performance compared to LQR.\nI thus plan on testing my hypothesis that MPC will be able to better optimize multi-input optogenetic stimulation while accommodating experimental constraints and considerations during real-time control on timescales relevant to network-level descriptions of neural activity.\nI will do this by assessing control quality of MPC compared to the heuristic LQR approach previously described as I simulate multi-output feedback control of firing rates and gamma oscillations observed in local field potentials (LFP).\n\n:::{#fig-mpc}\n::::{.dark-invert}\n![](img/mpc-schematic.png){style='padding:.5em; background: white'}\n::::\n\nAn illustration of how MPC optimizes the system input over a receding horizon.\nBy [Martin Behrendt](https://en.wikipedia.org/wiki/File:MPC_scheme_basic.svg), licensed under [CC BY-SA 3.0](https://creativecommons.org/licenses/by-sa/3.0/deed.en).\n:::\n\n## Approach\n### System and controller formulation\nNaturally, the model is a vital element of MPC.\nI will use a previously developed Gaussian linear dynamical system (GLDS) model [@bolus21], which has been shown to reliably capture firing rate dynamics in a light-driven spiking neuron system.\nThe discrete-time GLDS is governed by the following equations:\n\n$$\n\\begin{aligned}\nx_{t + 1} &= Ax_{t} + Bu_{t} + w_t  \\\\\ny_{t} &= Cx_{t} + d  \\\\\nz_{t} &= y_{t} + v_t  \\\\\n\\end{aligned}\n$$\n\nwhere $x_{t} \\in \\RR^n$ is the $n$-dimensional state, $u_{t} \\in \\RR^k$ is the $k$-dimensional stimulus (i.e., $k = 2$ for two opsins, one light source each), $y_{t} \\in \\RR^m$ is the firing rate in spikes/timestep (for each of $m$ measured neurons), and $z_{t} \\in \\RR^m$ is the number of binned spikes observed at time $t$.\n$A \\in \\RR^{n \\times n}$, $B \\in \\RR^{n \\times k}$, and $C \\in \\RR^{m \\times n}$ are the state transition, input, and output matrices, respectively.\n$w_{t} \\sim \\mathcal{N}\\left( 0, Q \\right)$ and $v_{t}\\mathcal{\\sim N}\\left( 0, R \\right)$ are Gaussian-distributed process and measurement noise, respectively, and $d \\in \\RR^{m \\times 1}$ represents baseline firing rates.\nModel order ($n$) and horizon length ($T \\in \\NN$) will be chosen to balance complexity and prediction error for noise-driven fitting data generated from the test network.\nThe latent state $x_{t}$ will be estimated online using the Kalman filter [@kalman60], driven by the prediction error $z_{t} - {\\widehat{y}}_{t|t - 1}$.\n\nI will set hard non-negative constraints on the light input as well as a ceiling determined by hardware limitations (i.e., the maximum voltage deliverable to the LED driver).\nTo design an appropriate cost function, I will use a conventional per-time step quadratic form\n\n$$\\ell( x_{t},r_{t},u_{t} ) = ( x_{t} - r_{t} )^{T}Q^{\\text{ctrl}}( x_{t} - r_{t} ) + u^{T}R^{\\text{ctrl}}u\\ ,$$\n\nwhere $r_{t} \\in \\RR^n$ is the reference trajectory at time $t$.\n$Q^{\\text{ctrl}}$ and $R^{\\text{ctrl}}$ are real $n \\times n$ and $k \\times k$ matrices chosen to appropriately penalize tracking error and stimulus size, respectively.\nThis quadratic cost function formulation lends the problem well to standard optimization techniques---combined with a linear dynamical system, it constitutes the classical linear-quadratic-Gaussian (LQG) control problem.\n\nThen, at every time step $t$ the controller solves the following quadratic program:\n\n$$ \n\\begin{aligned}\n    \\mini{} \\quad & \\sum_{\\tau=t}^{t+T} \\ell(x_\\tau, u_\\tau) \\\\\n    \\text{subject to} \\quad & u_\\tau \\succeq 0 \\\\\n        & x_{\\tau + 1} = Ax_{\\tau}+Bu_\\tau \\\\\n\\end{aligned}\n$$\n\nwhere $T \\in \\NN$ is the number of steps in the prediction/control horizon and $\\succeq$ indicates an inequality for each element of $u_\\tau \\in \\RR^k$.\nThis yields the solution $\\tilde{u}_\\tau,...,\\tilde{u}_{\\tau+T-1}$, of which we take just the first step $\\tilde{u}_t$ to apply to the system.\n\n\n### Control method comparison *in silico*\nTo confirm our assumption that bidirectional and multi-channel configurations will improve control quality, I will test both unidirectional and bidirectional actuation as well as one-channel and multi-channel configurations for each experiment.\n(In the bidirectional actuation case, one \"channel\" includes both an inhibition-triggering and an excitation-triggering light source).\nAnother condition of interest will be to penalize a low-pass-filtered version of the stimulus, which could reflect overheating or ion imbalances caused by prolonged stimulation [@yizhar11; @kokaia13; @stujenske15].\nThis could be added to the linear dynamics and quadratic cost functions without changing the optimization methods, but, as with opsin and channel count, the increased size of the problem increases latency which could affect which method performs best.\nMost importanly, I will compare open-loop, heuristic LQR, and MPC approaches to see whether MPC attains better performance despite a longer computational delay, as hypothesized.\nControl algorithm computation time will be measured for each method and used during simulations as a realistic delay.\nTo evaluate controller performance, I will use metrics such as the mean-squared error (MSE).\n\nIn the first experiment, I will simulate multi-output control of firing rates in an attempt to clamp population activity.\n@wagenaar05 and @newman13 laid the foundation for this by clamping aggregate, population firing rates, and @bolus21 took this further by treating firing rates of individual neurons separately, though with a single optic fiber input.\nThis is an obvious case where multiple inputs should provide more control, allowing us to manipulate neurons (or groups of neurons in the case of unsorted threshold crossings) more individually, each to its own baseline.\nThe experiment will be performed on a Poisson linear dynamical system (PLDS) model [@macke11] fit to optogenetic input/spike output data from a spiking neural network (SNN) model.\nThe SNN model will contain necessary features, such as cell types, time-varying exogenous input, and connectivity profiles, to produce stochastic firing patterns with unpredictable disturbances and will be simulated together with the recording and stimulation facilities of Aim 1. <!-- to avoid chapter chapter -->\n\nAs another experiment, I propose another form of network-level control---manipulating the oscillatory signatures found in LFP signals.\nGamma oscillations (30-90 Hz) are one such example, which have been shown to have time-varying properties and interact with other oscillatory bands.\nInterestingly, gamma rhythms can even show phase coherence in distant brain regions such as visual cortex in opposite hemispheres, which has been hypothesized to play a role in information integration [@buzsaki12a].\nI plan to test control methods on a virtual experiment of this phenomenon by simulating two populations of neurons exhibiting gamma oscillations [@wang96; @brunel03] with long-range connections mediating gamma frequency coherence, again using the framework from Aim 1.\nI will then perform feedback control on the LFP signal to counter the natural phase locking that arises, providing an opportunity to test how well LFP can be controlled on a <100-ms timescale of a single gamma cycle.\n\n\n<!-- ### Preparation for real-time experiments\nTo inform future experiments where compute time is crucial for control performance, I will record compute time of LQR and MPC approaches for varying numbers of input and output channels $k$ and $m$. \nFor instance, the time required to solve the quadratic program for MPC would provide a preliminary estimate of the minimum control period we may want to use when implementing MPC in real time.\nTo get a better idea of how this compute latency might affect a real experiment, I will also test multi-input MPC on a more realistic simulation, such as one of the example experiments from @sec-cleo-experiments, leveraging the latency simulation capabilities of the CLOC simulation framework. -->\n\n## Expected results\nI expect that bidirectional, multi-channel, and model predictive control will be perform better than unidirectional, single-channel, and LQR control, respectively for both experiments, despite the added computational cost these methods require.\nI also expect that restricting the controller through hard constraints or prolonged stimulation penalties will also be possible with the more sophisticated methods without greatly increasing the error.\n\n## Preliminary results\nBasic simulations controlling a linear dynamical system model fit to experimental data show the advantages of bidirectional control and of MPC (see @fig-mpc-sim).\nBidirectional actuation allows the system to avoid overshooting the reference, in the case of LQR, or to minimize error faster by first exciting then inhibiting, in the case of MPC.\nMPC's advantages in looking ahead also clearly allow it to follow the reference more closely than the heuristic LQR controller (assigning negative inputs to the second light source).\nHowever, these results do not yet account for control signal computation latency.\n\n\n\n\n\n\n\n\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=6}\n![Simulated control of an linear dynamical system with 1- and 2-input control, using LQR and MPC controllers. The top panel of each contains the reference and the actual firing rate, in spikes/second. The bottom contains the light intensity, in terms of mW/mm^2^, where blue represents light for an excitatory opsin (such as ChR2) and red-orange that for an inhibitory opsin (such as Jaws).](aim2_files/figure-pdf/fig-mpc-sim-output-1.pdf){#fig-mpc-sim}\n:::\n:::\n\n\n## Potential pitfalls & alternative strategies {#sec-aim2-pitfalls}\nThere are some limitations in the proposed GLDS model that may need to be addressed.\nWhile it was adequate for the experiments in @bolus21, a Poisson [@macke11] or other output nonlinearity may be needed in the case that a standard GLDS does not fit the data well.\nWhile this would likely make the estimation of $x$ more expensive, the underlying dynamics could remain linear, leaving the same underlying quadratic program for the controller to solve.\n\nThis touches another potential concern: the speed of MPC.\nIf the optimization problem solution is slow, there are a few options to explore.\nOne is that some variations in the control scheme can help balance speed and performance, such as letting the control horizon be shorter than the prediction horizon, which shrinks the optimization problem.\nLikewise, the control period can be longer than the time step of the system, reducing how often the control signal is computed.\nIf conventional methods such as these are unsuccessful, I may turn to approximate methods such as that described in @wang10 or training an artificial neural network.\nAnother potential solution is explicit MPC [@bemporad02], which finds a piecewise-affine explicit solution to the quadratic program which can be faster than obtaining the implicit solution for small-enough problems.\n\n",
    "supporting": [
      "aim2_files/figure-pdf"
    ],
    "filters": []
  }
}